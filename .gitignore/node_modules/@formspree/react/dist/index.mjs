// src/context.tsx
import React, { useEffect, useState, useContext, lazy, Suspense } from "react";
import {
  createClient,
  getDefaultClient
} from "@formspree/core";
import { loadStripe } from "@stripe/stripe-js/pure.js";
var Elements = lazy(
  () => import("@stripe/react-stripe-js").then((module) => {
    return { default: module.Elements };
  })
);
var FormspreeContext = React.createContext({
  client: void 0
});
FormspreeContext.displayName = "Formspree";
var stripePromise;
var getStripe = (stripeKey) => {
  if (!stripePromise) {
    stripePromise = loadStripe(stripeKey);
  }
  return stripePromise;
};
var handleCreateClient = (promise, project) => {
  let config = {};
  if (promise) {
    config.stripePromise = promise;
  }
  if (project) {
    config.project = project;
  }
  return createClient(config);
};
var FormspreeProvider = (props) => {
  const [stateStripePromise, setStateStripePromise] = useState(void 0);
  const [client, setClient] = useState(
    handleCreateClient(stateStripePromise, props.project)
  );
  useEffect(() => {
    client.startBrowserSession();
    return () => {
      client.teardown();
    };
  }, []);
  useEffect(() => {
    const getStripePromise = async () => {
      const promiseStripe = await getStripe(props.stripePK);
      setStateStripePromise(promiseStripe);
    };
    if (props.stripePK) {
      getStripePromise();
    }
  }, [props.stripePK]);
  useEffect(() => {
    if (stateStripePromise) {
      setClient(handleCreateClient(stateStripePromise, props.project));
    }
  }, [stateStripePromise]);
  return /* @__PURE__ */ React.createElement(FormspreeContext.Provider, { value: { client } }, props.stripePK ? /* @__PURE__ */ React.createElement(React.Fragment, null, stateStripePromise && /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement("p", null, "....") }, /* @__PURE__ */ React.createElement(Elements, { stripe: stateStripePromise }, /* @__PURE__ */ React.createElement(React.Fragment, null, props.children)))) : /* @__PURE__ */ React.createElement(React.Fragment, null, props.children));
};
function useFormspree() {
  const context = useContext(FormspreeContext);
  return context.client ? context : {
    client: getDefaultClient()
  };
}

// src/useForm.ts
import { useState as useState2 } from "react";
import { useElements, CardElement, useStripe } from "@stripe/react-stripe-js";

// package.json
var version = "2.4.2";

// src/useForm.ts
var isEvent = (data) => {
  return data.preventDefault !== void 0;
};
var useForm = (formKey, args = {}) => {
  const [result, setResult] = useState2(null);
  const [submitting, setSubmitting] = useState2(false);
  const [succeeded, setSucceeded] = useState2(false);
  const [errors, setErrors] = useState2([]);
  const formspreeContext = useFormspree();
  const client = args.client || formspreeContext;
  let stripe;
  let elements;
  if (!client) {
    throw new Error("You must provide a Formspree client");
  }
  if (!formKey) {
    throw new Error(
      'You must provide a form key or hashid (e.g. useForm("myForm") or useForm("123xyz")'
    );
  }
  if (formspreeContext.client && formspreeContext.client.stripePromise) {
    stripe = useStripe();
    elements = useElements();
  }
  const debug = !!args.debug;
  let extraData = args.data;
  const reset = () => {
    setSubmitting(false);
    setSucceeded(false);
    setErrors([]);
  };
  const handleSubmit = async (submissionData) => {
    const getFormData = async (event) => {
      event.preventDefault();
      const form = event.target;
      if (form.tagName != "FORM") {
        throw new Error("submit was triggered for a non-form element");
      }
      return new FormData(form);
    };
    let formData = isEvent(submissionData) ? await getFormData(submissionData) : submissionData;
    const appendExtraData = (prop, value) => {
      if (formData instanceof FormData) {
        formData.append(prop, value);
      } else {
        formData = Object.assign(formData, { [prop]: value });
      }
    };
    if (typeof extraData === "object") {
      for (const prop in extraData) {
        let extraDataValue;
        if (typeof extraData[prop] === "function") {
          extraDataValue = extraData[prop].call(null);
          if (typeof extraDataValue?.then === "function") {
            extraDataValue = await extraDataValue;
          }
        } else {
          extraDataValue = extraData[prop];
        }
        if (extraDataValue !== void 0) {
          appendExtraData(prop, extraDataValue);
        }
      }
    }
    const createPaymentMethod = async () => {
      const address = {
        ...formData.address_line1 && {
          line1: formData.address_line1
        },
        ...formData.address_line2 && {
          line2: formData.address_line2
        },
        ...formData.address_city && {
          city: formData.address_city
        },
        ...formData.address_country && {
          country: formData.address_country
        },
        ...formData.address_state && {
          state: formData.address_state
        },
        ...formData.address_postal_code && {
          postal_code: formData.address_postal_code
        }
      };
      const payload = await stripe.createPaymentMethod({
        type: "card",
        card: elements.getElement(CardElement),
        billing_details: {
          ...formData.name && { name: formData.name },
          ...formData.email && { email: formData.email },
          ...formData.phone && { phone: formData.phone },
          ...address && {
            address
          }
        }
      });
      return payload;
    };
    setSubmitting(true);
    return formspreeContext.client.submitForm(formKey, formData, {
      endpoint: args.endpoint,
      clientName: `@formspree/react@${version}`,
      createPaymentMethod: formspreeContext.client && formspreeContext.client.stripePromise ? createPaymentMethod : void 0
    }).then((result2) => {
      let status = result2.response.status;
      let body;
      if (status === 200) {
        if (debug)
          console.log("Form submitted", result2);
        setSucceeded(true);
        setResult(result2);
        setErrors([]);
      } else if (status >= 400) {
        body = result2.body;
        if (body.errors) {
          setErrors(body.errors);
          if (debug)
            console.log("Error", result2);
        } else {
          setErrors([{ message: "Unexpected error" }]);
          if (debug)
            console.log("Unexpected error", result2);
        }
        setSucceeded(false);
      }
      return result2;
    }).catch((error) => {
      if (debug)
        console.log("Unexpected error", error);
      setSucceeded(false);
      throw error;
    }).finally(() => {
      setSubmitting(false);
    });
  };
  return [{ result, submitting, succeeded, errors }, handleSubmit, reset];
};

// src/ValidationError.tsx
import React3 from "react";
var ValidationError = (props) => {
  const { prefix, field, errors, ...attrs } = props;
  const error = (errors || []).find((error2) => {
    return error2.field === field;
  });
  if (!error) {
    return null;
  }
  return /* @__PURE__ */ React3.createElement("div", { ...attrs }, prefix, " ", error.message);
};

// src/types.ts
import { isFieldError } from "@formspree/core";
export {
  CardElement,
  FormspreeProvider,
  ValidationError,
  isFieldError,
  useForm,
  useFormspree
};
//# sourceMappingURL=index.mjs.map