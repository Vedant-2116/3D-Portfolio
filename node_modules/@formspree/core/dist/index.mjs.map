{"version":3,"sources":["../src/base64.js","../src/forms.ts","../src/utils.ts","../src/session.ts","../src/core.ts"],"sourcesContent":["const b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n\nexport function btoa(string) {\n  string = String(string);\n  var bitmap,\n    a,\n    b,\n    c,\n    result = '',\n    i = 0,\n    rest = string.length % 3; // To determine the final padding\n\n  for (; i < string.length; ) {\n    if (\n      (a = string.charCodeAt(i++)) > 255 ||\n      (b = string.charCodeAt(i++)) > 255 ||\n      (c = string.charCodeAt(i++)) > 255\n    )\n      throw new TypeError(\n        \"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\"\n      );\n\n    bitmap = (a << 16) | (b << 8) | c;\n    result +=\n      b64.charAt((bitmap >> 18) & 63) +\n      b64.charAt((bitmap >> 12) & 63) +\n      b64.charAt((bitmap >> 6) & 63) +\n      b64.charAt(bitmap & 63);\n  }\n\n  // If there's need of padding, replace the last 'A's with equal signs\n  return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;\n}\n\nexport function atob(string) {\n  // atob can work with strings with whitespaces, even inside the encoded part,\n  // but only \\t, \\n, \\f, \\r and ' ', which can be stripped.\n  string = String(string).replace(/[\\t\\n\\f\\r ]+/g, '');\n  if (!b64re.test(string))\n    throw new TypeError(\n      \"Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.\"\n    );\n\n  // Adding the padding if missing, for semplicity\n  string += '=='.slice(2 - (string.length & 3));\n  var bitmap,\n    result = '',\n    r1,\n    r2,\n    i = 0;\n  for (; i < string.length; ) {\n    bitmap =\n      (b64.indexOf(string.charAt(i++)) << 18) |\n      (b64.indexOf(string.charAt(i++)) << 12) |\n      ((r1 = b64.indexOf(string.charAt(i++))) << 6) |\n      (r2 = b64.indexOf(string.charAt(i++)));\n\n    result +=\n      r1 === 64\n        ? String.fromCharCode((bitmap >> 16) & 255)\n        : r2 === 64\n        ? String.fromCharCode((bitmap >> 16) & 255, (bitmap >> 8) & 255)\n        : String.fromCharCode(\n            (bitmap >> 16) & 255,\n            (bitmap >> 8) & 255,\n            bitmap & 255\n          );\n  }\n  return result;\n}\n","import { PaymentMethodResult } from '@stripe/stripe-js';\n\nexport type SubmissionData = FormData | any;\n\nexport interface SubmissionOptions {\n  endpoint?: string;\n  clientName?: string;\n  fetchImpl?: typeof fetch;\n  createPaymentMethod?: () => Promise<PaymentMethodResult>;\n}\n\nenum FormErrorCodeEnum {\n  INACTIVE = 'INACTIVE',\n  BLOCKED = 'BLOCKED',\n  EMPTY = 'EMPTY',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  FORM_NOT_FOUND = 'FORM_NOT_FOUND',\n  NO_FILE_UPLOADS = 'NO_FILE_UPLOADS',\n  TOO_MANY_FILES = 'TOO_MANY_FILES',\n  FILES_TOO_BIG = 'FILES_TOO_BIG',\n  STRIPE_CLIENT_ERROR = 'STRIPE_CLIENT_ERROR',\n  STRIPE_SCA_ERROR = 'STRIPE_SCA_ERROR'\n}\n\nenum FieldErrorCodeEnum {\n  REQUIRED_FIELD_MISSING = 'REQUIRED_FIELD_MISSING',\n  REQUIRED_FIELD_EMPTY = 'REQUIRED_FIELD_EMPTY',\n  TYPE_EMAIL = 'TYPE_EMAIL',\n  TYPE_NUMERIC = 'TYPE_NUMERIC',\n  TYPE_TEXT = 'TYPE_TEXT'\n}\n\nexport type FormErrorCode = keyof typeof FormErrorCodeEnum;\nexport type FieldErrorCode = keyof typeof FieldErrorCodeEnum;\n\nexport interface FormError {\n  field?: string;\n  code?: FormErrorCode | FieldErrorCode;\n  message: string;\n  details?: {\n    stripeCode?: string;\n  };\n}\n\nexport interface FieldError extends FormError {\n  field: string;\n  code: FieldErrorCode;\n}\n\nexport function isFieldError(error: FormError): error is FieldError {\n  return (\n    (error as FieldError).code in FieldErrorCodeEnum &&\n    (error as FieldError).field !== undefined\n  );\n}\n\ntype KnownError<T> = T extends\n  | { code: FormErrorCode }\n  | { code: FieldErrorCode }\n  ? T\n  : never;\n\nexport function isKnownError(error: FormError): error is KnownError<FormError> {\n  return (\n    !!error.code &&\n    (error.code in FormErrorCodeEnum || error.code in FieldErrorCodeEnum)\n  );\n}\n\nexport interface SuccessBody {\n  id: string;\n  data: object;\n}\n\nexport interface ErrorBody {\n  errors: FormError[];\n}\n\nexport type SubmissionBody = SuccessBody | ErrorBody;\n\nexport function hasErrors(body: SubmissionBody): body is ErrorBody {\n  return (body as ErrorBody).errors !== undefined;\n}\n\nexport interface SubmissionResponse {\n  body: SubmissionBody;\n  response: Response | null;\n}\n","// @ts-ignore\nimport { btoa } from './base64';\nimport { version } from '../package.json';\nimport { hasErrors, SubmissionResponse } from './forms';\nimport { PaymentMethod, Stripe } from '@stripe/stripe-js';\n\n/**\n * Base-64 encodes a (JSON-castable) object.\n *\n * @param obj - The object to encode.\n */\nexport const encode64 = (obj: object): string => {\n  return btoa(JSON.stringify(obj));\n};\n\n/**\n * Appends a key-value pair to a target.\n *\n * @param target - An object or FormData instance to mutate.\n * @param key - The key to append.\n * @param value - The value to append.\n */\nexport const append = (\n  target: { [key: string]: any } | FormData,\n  key: string,\n  value: string\n): void => {\n  if (target instanceof FormData) {\n    target.append(key, value);\n  } else {\n    target[key] = value;\n  }\n};\n\n/**\n * Converts a snake case string to camel case.\n *\n * @param str - A string to convert to camel case.\n */\nexport const toCamel = (str: string): string => {\n  return str.replace(/([-_][a-z])/gi, $1 => {\n    return $1\n      .toUpperCase()\n      .replace('-', '')\n      .replace('_', '');\n  });\n};\n\n/**\n * Converts the top-level keys of an object to camel case.\n * This function returns a new object (instead of mutating in place).\n *\n * @param obj - An object with string keys.\n */\nexport const camelizeTopKeys = (obj: {\n  [key: string]: any;\n}): { [key: string]: any } => {\n  let newObject: { [key: string]: any } = {};\n\n  for (let [key, value] of Object.entries(obj)) {\n    newObject[toCamel(key)] = value;\n  }\n\n  return newObject;\n};\n\n/**\n * Generates a client header.\n *\n * @param givenLabel\n */\nexport const clientHeader = (givenLabel: string | undefined): string => {\n  const label = `@formspree/core@${version}`;\n  if (!givenLabel) return label;\n  return `${givenLabel} ${label}`;\n};\n\n/**\n * The current timestamp.\n */\nexport const now = (): number => {\n  // @ts-ignore\n  return 1 * new Date();\n};\n\nexport const appendExtraData = (\n  formData: FormData | object,\n  prop: string,\n  value: string\n) => {\n  if (formData instanceof FormData) {\n    formData.append(prop, value);\n  } else {\n    formData = Object.assign(formData, { [prop]: value });\n  }\n};\n\ntype HandleSCAargs = {\n  stripePromise: Stripe;\n  response: Response;\n  responseData: any;\n  payload: {\n    paymentMethod: PaymentMethod;\n    error?: undefined;\n  };\n  data: FormData | object;\n  fetchImpl: (\n    input: RequestInfo,\n    init?: RequestInit | undefined\n  ) => Promise<Response>;\n  request: {\n    method: string;\n    mode: 'cors';\n    body: string | FormData;\n    headers: {\n      [key: string]: string;\n    };\n  };\n  url: string;\n};\n\nexport const handleSCA = async ({\n  stripePromise,\n  response,\n  responseData,\n  payload,\n  data,\n  fetchImpl,\n  request,\n  url\n}: HandleSCAargs): Promise<SubmissionResponse> => {\n  const stripeResult = await stripePromise.handleCardAction(\n    responseData.stripe.paymentIntentClientSecret\n  );\n\n  // Handle Stripe error\n  if (stripeResult.error) {\n    return {\n      response,\n      body: {\n        errors: [\n          {\n            code: 'STRIPE_CLIENT_ERROR',\n            message: 'Stripe SCA error',\n            field: 'paymentMethod'\n          }\n        ]\n      }\n    };\n  } else {\n    if (!payload.paymentMethod.id) {\n      appendExtraData(data, 'paymentMethod', payload.paymentMethod.id);\n    }\n    appendExtraData(data, 'paymentIntent', stripeResult.paymentIntent.id);\n    appendExtraData(data, 'resubmitKey', responseData.resubmitKey);\n\n    // Resubmit the form with the paymentIntent and resubmitKey\n    const resSubmitResponse = await fetchImpl(url, {\n      ...request,\n      body: JSON.stringify({\n        paymentIntent: stripeResult.paymentIntent.id,\n        resubmitKey: responseData.resubmitKey\n      })\n    });\n    const resSubmitData = await resSubmitResponse.json();\n\n    return {\n      response: resSubmitResponse,\n      body: resSubmitData\n    };\n  }\n};\n\nexport function handleLegacyErrorPayload({\n  body,\n  response\n}: SubmissionResponse): SubmissionResponse {\n  if (!hasErrors(body) && (body as any)?.error) {\n    body = { errors: [{ message: (body as any).error }] };\n  }\n  return { body, response };\n}\n","import { now } from './utils';\n\n// @ts-ignore\nimport { atob } from './base64';\n\nconst webdriver = (): boolean => {\n  return (\n    navigator.webdriver ||\n    !!document.documentElement.getAttribute(atob('d2ViZHJpdmVy')) ||\n    // @ts-ignore\n    !!window.callPhantom ||\n    // @ts-ignore\n    !!window._phantom\n  );\n};\n\nexport class Session {\n  loadedAt: number;\n  webdriver: boolean;\n\n  constructor() {\n    this.loadedAt = now();\n    this.webdriver = webdriver();\n  }\n\n  teardown(): void {}\n\n  data(): {\n    loadedAt: number;\n    webdriver: boolean;\n  } {\n    return {\n      loadedAt: this.loadedAt,\n      webdriver: this.webdriver\n    };\n  }\n}\n","import { Stripe } from '@stripe/stripe-js';\nimport {\n  hasErrors,\n  SubmissionData,\n  SubmissionOptions,\n  SubmissionBody,\n  SubmissionResponse\n} from './forms';\nimport {\n  appendExtraData,\n  clientHeader,\n  encode64,\n  handleLegacyErrorPayload,\n  handleSCA\n} from './utils';\nimport { Session } from './session';\n\nexport interface Config {\n  project?: string;\n  stripePromise?: Stripe;\n}\n\nexport class Client {\n  project: string | undefined;\n  stripePromise: Stripe | undefined;\n  private session: Session | undefined;\n\n  constructor(config: Config = {}) {\n    this.project = config.project;\n    this.stripePromise = config.stripePromise;\n    if (typeof window !== 'undefined') this.startBrowserSession();\n  }\n\n  /**\n   * Starts a browser session.\n   */\n  startBrowserSession(): void {\n    if (!this.session) {\n      this.session = new Session();\n    }\n  }\n\n  /**\n   * Teardown the client session.\n   */\n  teardown(): void {\n    if (this.session) this.session.teardown();\n  }\n\n  /**\n   * Submit a form.\n   *\n   * @param formKey - The form key.\n   * @param data - An object or FormData instance containing submission data.\n   * @param args - An object of form submission data.\n   */\n  async submitForm(\n    formKey: string,\n    data: SubmissionData,\n    opts: SubmissionOptions = {}\n  ): Promise<SubmissionResponse> {\n    let endpoint = opts.endpoint || 'https://formspree.io';\n    let fetchImpl = opts.fetchImpl || fetch;\n    let url = this.project\n      ? `${endpoint}/p/${this.project}/f/${formKey}`\n      : `${endpoint}/f/${formKey}`;\n\n    const serializeBody = (data: SubmissionData): FormData | string => {\n      if (data instanceof FormData) return data;\n      return JSON.stringify(data);\n    };\n\n    let headers: { [key: string]: string } = {\n      Accept: 'application/json',\n      'Formspree-Client': clientHeader(opts.clientName)\n    };\n\n    if (this.session) {\n      headers['Formspree-Session-Data'] = encode64(this.session.data());\n    }\n\n    if (!(data instanceof FormData)) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    let request = {\n      method: 'POST',\n      mode: 'cors' as const,\n      body: serializeBody(data),\n      headers\n    };\n\n    // first check if we need to add the stripe paymentMethod\n    if (this.stripePromise && opts.createPaymentMethod) {\n      // Get Stripe payload\n      const payload = await opts.createPaymentMethod();\n\n      if (payload.error) {\n        // Return the error in case Stripe failed to create a payment method\n        return {\n          response: null,\n          body: {\n            errors: [\n              {\n                code: 'STRIPE_CLIENT_ERROR',\n                message: 'Error creating payment method',\n                field: 'paymentMethod'\n              }\n            ]\n          }\n        };\n      }\n\n      // Add the paymentMethod to the data\n      appendExtraData(data, 'paymentMethod', payload.paymentMethod.id);\n\n      // Send a request to Formspree server to handle the payment method\n      const response = await fetchImpl(url, {\n        ...request,\n        body: data\n      });\n      const responseData = await response.json();\n\n      // Handle SCA\n      if (\n        responseData &&\n        responseData.stripe &&\n        responseData.stripe.requiresAction &&\n        responseData.resubmitKey\n      ) {\n        return await handleSCA({\n          stripePromise: this.stripePromise,\n          responseData,\n          response,\n          payload,\n          data,\n          fetchImpl,\n          request,\n          url\n        });\n      }\n\n      return handleLegacyErrorPayload({\n        response,\n        body: responseData\n      });\n    } else {\n      return fetchImpl(url, request)\n        .then(response => {\n          return response.json().then(\n            (body: SubmissionBody): SubmissionResponse => {\n              return handleLegacyErrorPayload({ body, response });\n            }\n          );\n        })\n        .catch();\n    }\n  }\n}\n\n/**\n * Constructs the client object.\n */\nexport const createClient = (config?: Config): Client => new Client(config);\n\n/**\n * Fetches the global default client.\n */\nexport const getDefaultClient = (): Client => {\n  if (!defaultClientSingleton) {\n    defaultClientSingleton = createClient();\n  }\n  return defaultClientSingleton;\n};\n\n/**\n * The global default client. Note, this client may not get torn down.\n */\nlet defaultClientSingleton: Client;\n"],"mappings":"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","names":["FieldErrorCodeEnum","data"]}