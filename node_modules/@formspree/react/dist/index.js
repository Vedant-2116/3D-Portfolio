function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
// src/index.ts
var src_exports = {};
__export(src_exports, {
    CardElement: function() {
        return import_react_stripe_js.CardElement;
    },
    FormspreeProvider: function() {
        return FormspreeProvider;
    },
    ValidationError: function() {
        return ValidationError;
    },
    isFieldError: function() {
        return import_core2.isFieldError;
    },
    useForm: function() {
        return useForm;
    },
    useFormspree: function() {
        return useFormspree;
    }
});
module.exports = __toCommonJS(src_exports);
// src/context.tsx
var import_react = __toESM(require("react"));
var import_core = require("@formspree/core");
var import_pure = require("@stripe/stripe-js/pure.js");
var Elements = (0, import_react.lazy)(function() {
    return import("@stripe/react-stripe-js").then(function(module2) {
        return {
            default: module2.Elements
        };
    });
});
var FormspreeContext = import_react.default.createContext({
    client: void 0
});
FormspreeContext.displayName = "Formspree";
var stripePromise;
var getStripe = function(stripeKey) {
    if (!stripePromise) {
        stripePromise = (0, import_pure.loadStripe)(stripeKey);
    }
    return stripePromise;
};
var handleCreateClient = function(promise, project) {
    var config = {};
    if (promise) {
        config.stripePromise = promise;
    }
    if (project) {
        config.project = project;
    }
    return (0, import_core.createClient)(config);
};
var FormspreeProvider = function(props) {
    var _ref = _sliced_to_array((0, import_react.useState)(void 0), 2), stateStripePromise = _ref[0], setStateStripePromise = _ref[1];
    var _ref1 = _sliced_to_array((0, import_react.useState)(handleCreateClient(stateStripePromise, props.project)), 2), client = _ref1[0], setClient = _ref1[1];
    (0, import_react.useEffect)(function() {
        client.startBrowserSession();
        return function() {
            client.teardown();
        };
    }, []);
    (0, import_react.useEffect)(function() {
        var getStripePromise = function() {
            var _ref = _async_to_generator(function() {
                var promiseStripe;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                getStripe(props.stripePK)
                            ];
                        case 1:
                            promiseStripe = _state.sent();
                            setStateStripePromise(promiseStripe);
                            return [
                                2
                            ];
                    }
                });
            });
            return function getStripePromise() {
                return _ref.apply(this, arguments);
            };
        }();
        if (props.stripePK) {
            getStripePromise();
        }
    }, [
        props.stripePK
    ]);
    (0, import_react.useEffect)(function() {
        if (stateStripePromise) {
            setClient(handleCreateClient(stateStripePromise, props.project));
        }
    }, [
        stateStripePromise
    ]);
    return /* @__PURE__ */ import_react.default.createElement(FormspreeContext.Provider, {
        value: {
            client: client
        }
    }, props.stripePK ? /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, stateStripePromise && /* @__PURE__ */ import_react.default.createElement(import_react.Suspense, {
        fallback: /* @__PURE__ */ import_react.default.createElement("p", null, "....")
    }, /* @__PURE__ */ import_react.default.createElement(Elements, {
        stripe: stateStripePromise
    }, /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, props.children)))) : /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, props.children));
};
function useFormspree() {
    var context = (0, import_react.useContext)(FormspreeContext);
    return context.client ? context : {
        client: (0, import_core.getDefaultClient)()
    };
}
// src/useForm.ts
var import_react2 = require("react");
var import_react_stripe_js = require("@stripe/react-stripe-js");
// package.json
var version = "2.4.2";
// src/useForm.ts
var isEvent = function(data) {
    return data.preventDefault !== void 0;
};
var useForm = function(formKey) {
    var args = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _ref = _sliced_to_array((0, import_react2.useState)(null), 2), result = _ref[0], setResult = _ref[1];
    var _ref1 = _sliced_to_array((0, import_react2.useState)(false), 2), submitting = _ref1[0], setSubmitting = _ref1[1];
    var _ref2 = _sliced_to_array((0, import_react2.useState)(false), 2), succeeded = _ref2[0], setSucceeded = _ref2[1];
    var _ref3 = _sliced_to_array((0, import_react2.useState)([]), 2), errors = _ref3[0], setErrors = _ref3[1];
    var formspreeContext = useFormspree();
    var client = args.client || formspreeContext;
    var stripe;
    var elements;
    if (!client) {
        throw new Error("You must provide a Formspree client");
    }
    if (!formKey) {
        throw new Error('You must provide a form key or hashid (e.g. useForm("myForm") or useForm("123xyz")');
    }
    if (formspreeContext.client && formspreeContext.client.stripePromise) {
        stripe = (0, import_react_stripe_js.useStripe)();
        elements = (0, import_react_stripe_js.useElements)();
    }
    var debug = !!args.debug;
    var extraData = args.data;
    var reset = function() {
        setSubmitting(false);
        setSucceeded(false);
        setErrors([]);
    };
    var handleSubmit = function() {
        var _ref = _async_to_generator(function(submissionData) {
            var getFormData, formData, _tmp, appendExtraData, _tmp1, _tmp2, _i, prop, extraDataValue, createPaymentMethod;
            return _ts_generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        getFormData = function() {
                            var _ref = _async_to_generator(function(event) {
                                var form;
                                return _ts_generator(this, function(_state) {
                                    event.preventDefault();
                                    form = event.target;
                                    if (form.tagName != "FORM") {
                                        throw new Error("submit was triggered for a non-form element");
                                    }
                                    return [
                                        2,
                                        new FormData(form)
                                    ];
                                });
                            });
                            return function getFormData(event) {
                                return _ref.apply(this, arguments);
                            };
                        }();
                        if (!isEvent(submissionData)) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            getFormData(submissionData)
                        ];
                    case 1:
                        _tmp = _state.sent();
                        return [
                            3,
                            3
                        ];
                    case 2:
                        _tmp = submissionData;
                        _state.label = 3;
                    case 3:
                        formData = _tmp;
                        appendExtraData = function(prop, value) {
                            if (_instanceof(formData, FormData)) {
                                formData.append(prop, value);
                            } else {
                                formData = Object.assign(formData, _define_property({}, prop, value));
                            }
                        };
                        if (!(typeof extraData === "object")) return [
                            3,
                            10
                        ];
                        _tmp1 = [];
                        for(_tmp2 in extraData)_tmp1.push(_tmp2);
                        _i = 0;
                        _state.label = 4;
                    case 4:
                        if (!(_i < _tmp1.length)) return [
                            3,
                            10
                        ];
                        prop = _tmp1[_i];
                        extraDataValue = void 0;
                        if (!(typeof extraData[prop] === "function")) return [
                            3,
                            7
                        ];
                        extraDataValue = extraData[prop].call(null);
                        if (!(typeof (extraDataValue === null || extraDataValue === void 0 ? void 0 : extraDataValue.then) === "function")) return [
                            3,
                            6
                        ];
                        return [
                            4,
                            extraDataValue
                        ];
                    case 5:
                        extraDataValue = _state.sent();
                        _state.label = 6;
                    case 6:
                        return [
                            3,
                            8
                        ];
                    case 7:
                        extraDataValue = extraData[prop];
                        _state.label = 8;
                    case 8:
                        if (extraDataValue !== void 0) {
                            appendExtraData(prop, extraDataValue);
                        }
                        _state.label = 9;
                    case 9:
                        _i++;
                        return [
                            3,
                            4
                        ];
                    case 10:
                        createPaymentMethod = function() {
                            var _ref = _async_to_generator(function() {
                                var address, payload;
                                return _ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            address = _object_spread({}, formData.address_line1 && {
                                                line1: formData.address_line1
                                            }, formData.address_line2 && {
                                                line2: formData.address_line2
                                            }, formData.address_city && {
                                                city: formData.address_city
                                            }, formData.address_country && {
                                                country: formData.address_country
                                            }, formData.address_state && {
                                                state: formData.address_state
                                            }, formData.address_postal_code && {
                                                postal_code: formData.address_postal_code
                                            });
                                            return [
                                                4,
                                                stripe.createPaymentMethod({
                                                    type: "card",
                                                    card: elements.getElement(import_react_stripe_js.CardElement),
                                                    billing_details: _object_spread({}, formData.name && {
                                                        name: formData.name
                                                    }, formData.email && {
                                                        email: formData.email
                                                    }, formData.phone && {
                                                        phone: formData.phone
                                                    }, address && {
                                                        address: address
                                                    })
                                                })
                                            ];
                                        case 1:
                                            payload = _state.sent();
                                            return [
                                                2,
                                                payload
                                            ];
                                    }
                                });
                            });
                            return function createPaymentMethod() {
                                return _ref.apply(this, arguments);
                            };
                        }();
                        setSubmitting(true);
                        return [
                            2,
                            formspreeContext.client.submitForm(formKey, formData, {
                                endpoint: args.endpoint,
                                clientName: "@formspree/react@".concat(version),
                                createPaymentMethod: formspreeContext.client && formspreeContext.client.stripePromise ? createPaymentMethod : void 0
                            }).then(function(result2) {
                                var status = result2.response.status;
                                var body;
                                if (status === 200) {
                                    if (debug) console.log("Form submitted", result2);
                                    setSucceeded(true);
                                    setResult(result2);
                                    setErrors([]);
                                } else if (status >= 400) {
                                    body = result2.body;
                                    if (body.errors) {
                                        setErrors(body.errors);
                                        if (debug) console.log("Error", result2);
                                    } else {
                                        setErrors([
                                            {
                                                message: "Unexpected error"
                                            }
                                        ]);
                                        if (debug) console.log("Unexpected error", result2);
                                    }
                                    setSucceeded(false);
                                }
                                return result2;
                            }).catch(function(error) {
                                if (debug) console.log("Unexpected error", error);
                                setSucceeded(false);
                                throw error;
                            }).finally(function() {
                                setSubmitting(false);
                            })
                        ];
                }
            });
        });
        return function handleSubmit(submissionData) {
            return _ref.apply(this, arguments);
        };
    }();
    return [
        {
            result: result,
            submitting: submitting,
            succeeded: succeeded,
            errors: errors
        },
        handleSubmit,
        reset
    ];
};
// src/ValidationError.tsx
var import_react3 = __toESM(require("react"));
var ValidationError = function(props) {
    var prefix = props.prefix, field = props.field, errors = props.errors, attrs = _object_without_properties(props, [
        "prefix",
        "field",
        "errors"
    ]);
    var error = (errors || []).find(function(error2) {
        return error2.field === field;
    });
    if (!error) {
        return null;
    }
    return /* @__PURE__ */ import_react3.default.createElement("div", _object_spread({}, attrs), prefix, " ", error.message);
};
// src/types.ts
var import_core2 = require("@formspree/core");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    CardElement: CardElement,
    FormspreeProvider: FormspreeProvider,
    ValidationError: ValidationError,
    isFieldError: isFieldError,
    useForm: useForm,
    useFormspree: useFormspree
});
//# sourceMappingURL=index.js.map